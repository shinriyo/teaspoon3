# -*- coding: utf-8 -*-

from libs.controller import RootControllerHandler, authorized
from libs.form_xcode import form_encode
from tornado.web import authenticated
from models import User
from json import dumps

class RootController(RootControllerHandler):    
    # GET '/'
    # -------
    def _get_(self, **kw):
        # demonstrates how to use the session.
        # hint: it's just a dict object assosiated to the request using a session cookie
        session = self.current_session
        session['count'] = session.get('count', 0) + 1        
        self.write("hello, you've been here for %s times"%session['count'])
        
    # GET '/login'
    # ------------
    def _get_login(self, **kw):
        # checks if the user is already logged
        user = self.current_user
        # if so, redirects to kw['next'] (kw is the qs/form params) or '/'
        if user: self.redirect(kw.get('next', '/'))
        # else, renders the login template.
        # check it out at templates/login.html
        else: self.render('login.html', user_name=kw.get('user_name', ''), next=kw.get('next', ''))
    
    # POST '/login'
    # -------------
    def _post_login(self, **kw):
        # checks if the user is already logged
        user = self.current_user
        # if not, tries to fetch the user
        # from the database and validate the password.
        if not user:
            user = User.by_user_name(kw['user_name'])   
            if user and user.validate_password(kw['password']):
                # sets the auth cookie.
                # don't worry, not the real 'password'.
                # just a piece of the junky salt generated by the User model
                self.set_secure_cookie('auth', dumps({
                    'id': user.id,
                    'password': user.password[0:8]
                }))
            else: user = None
        
        # if user logged in successfuly
        # redirects to kw['next'] or '/'
        if user: self.redirect(kw.get('next', '/'))
        # else, redirects to the /login page
        else:
            kw.pop('password')
            self.redirect('/login?%s'%form_encode(kw))
        
    # GET '/logout'
    # -------------
    def _get_logout(self, **kw):
        self.clear_cookie('auth')
        self.redirect(kw.get('next', '/'))
        
    # GET '/forbidden'
    # ----------------
    def _get_forbidden(self, **kw):
        self.write('you can not access this resource %s'%kw.get('next', ''))
        
    # GET '/users_only'
    # -----------------
    @authenticated
    def _get_users_only(self, **kw):
        # if there isn't a user assosiated to the request using the auth cookie,
        # it'll redirect to /login
        self.write('welcome to the very secret users only section')  
        
    # GET '/admins_only'
    # ------------------
    @authenticated
    @authorized('admin')
    def _get_admins_only(self, **kw):
        # if there isn't a user assosiated to the request using the auth cookie,
        # it'll redirect to /login.
        # if the user does not have the 'admin' permission,
        # it'll redirect to /forbidden.
        self.write('welcome your highness')